#!/usr/bin/ruby

# Panoptimon - The All-Seeing System Monitor Daemon

# copyright 2012 Eric L. Wilhelm

require 'optparse'
require 'ostruct'
require 'json'

require 'rubygems'
require 'daemons'
require 'eventmachine'

def load_options(args)
  defaults = {
    :daemonize      => true,
    :config_dir     => '/etc/panoptimon/',
    :config_file    => '/etc/panoptimon/.panoptimon',
    :collectors_dir => '%/collectors',
    :plugins_dir    => '%/plugins',
    :collector_timeout  => 120,
    :collector_interval => 60,
  }

  options = ->() {
    o = {}
    OptionParser.new do |opts|

      opts.on('-c', '--config-file [FILENAME]',
        "Alternative configuration file (#{defaults[:config_file]})"
      ) { |v| o[:config_file] = v }

      opts.on('-D', '--[no-]foreground',
        "Don't daemonize (#{not defaults[:daemonize]})"
      ) { |v| o[:daemonize] = ! v }

      ['config', 'collectors', 'plugins'].each { |x|
        k = "#{x}_dir".to_sym
        opts.on("--#{x}-dir [DIR]",
          "#{x.capitalize} directory (#{defaults[k]})"
        ) { |v| o[k] = v }
      }

      ['collectors', 'plugins', 'roles'].each { |x|
        opts.on('--list-'+x, "list all #{x} found"
        ) { raise "--list-#{x} unimplemented" }
      }

      opts.on('-o', '--configure [X=Y]',
        'Set configuration values'
      ) { |x|
        (k,v) = x.split(/=/, 2)
        (o[:configure] ||= {})[k.to_sym] = v
      }

      opts.on('-l', '--location [LOC]', "Set node location"
        # TODO this feature might be implemented as a plugin
      ) { raise "--location unimplemented" }

      opts.on('-d', '--debug', "Enable debugging."
      ) { |v| o[:debug] = v }

      opts.on('--verbose', "Enable verbose output"
      ) { |v| o[:verbose] = v }

      opts.on('-v', '--version', "Print version"
      ) { raise "version unimplemented" }


    end.parse!(args)
    return o
  }.call

  config = defaults.merge!(
    options[:config_file].to_s == '' ? {} : JSON.parse(
      File.read(options[:config_file] || defaults[:config_file]),
      {:symbolize_names => true}
    )
  ).merge!(options);

  (config.delete(:configure) || {}).each { | k,v| config[k] = v }

  # these can be relative to config_dir
  [:collectors_dir, :plugins_dir].each { |d|
    config[d] = File.join(config[:config_dir], config[d]) \
      if config[d].sub!(/^%\//, '')
  }


  return OpenStruct.new(config).freeze
end

opts = load_options(ARGV)

# TODO --list-<foo> actions

# XXX needs a real test
puts "options: ", JSON.pretty_generate(opts.marshal_dump) if opts.debug

# vim:ts=2:sw=2:et:sta
