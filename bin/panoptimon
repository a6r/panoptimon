#!/usr/bin/ruby

# Panoptimon - The All-Seeing System Monitor Daemon

# copyright 2012 Eric L. Wilhelm

require 'panoptimon'

require 'ostruct'
require 'json'
require 'pathname'

require 'rubygems'
require 'daemons'
require 'eventmachine'

opts = Panoptimon.load_options(ARGV) or exit

monitor = Panoptimon::Monitor.new(config: opts)
monitor.logger.level = ::Logger::DEBUG if opts.debug

# XXX needs a real test
puts "options: ", JSON.pretty_generate(opts.marshal_dump) if opts.debug

if opts.lists

  opts.lists.uniq.sort.each { |list|
    does = {
      collectors: ->() { monitor.find_collectors },
      plugins:    ->() { monitor.find_plugins },
      roles:      ->() { raise "roles list not implemented" },
    }
    puts does[list].call.unshift("#{list}:").join("\n  ");
  }

  exit
end

# TODO load plugins before daemonize - fatal on errors

if opts.daemonize
  # TODO must remember cwd and/or make config values into absolute paths?
  #      (Pathname...realpath?)
  # TODO could possibly use webrick::daemon.start or process.daemon,
  # but this has support for redirecting io to logfiles... worth it?
  Daemons.daemonize(
    app_name: Pathname.new($0).basename.to_s,
    log_output: true)
end

# load collectors after daemonize - skip + complain
monitor.load_collectors

EM.run {
  monitor.run
}

# vim:ts=2:sw=2:et:sta
